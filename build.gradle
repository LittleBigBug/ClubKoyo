plugins {
    id 'maven-publish'
    id 'fabric-loom' version '0.7-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

group = "net.yasfu"
archivesBaseName = "ClubKoyo"
version = project.property("pkg_version")

repositories {
    mavenCentral()
}

configurations {
    toShade { }
    modImplementation.extendsFrom(toShade)
}

dependencies {
    minecraft "com.mojang:minecraft:${project.mc_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    toShade "org.reflections:reflections:0.9.12"
}

tasks {
    shadowJar {
        configurations = [project.configurations.toShade]
    }

    remapJar {
        dependsOn ":shadowJar"
        input.set shadowJar.archiveFile
    }

    build {
        doLast {
            shadowJar.archiveFile.get().asFile.delete()
        }
    }

    java {
        withSourcesJar()

        toolchain {
            languageVersion = JavaLanguageVersion.of(8)
        }
    }

    jar {
        from("LICENSE") {
            rename { "${it}_${project.archivesBaseName}"}
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
    // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
    // We'll use that if it's available, but otherwise we'll use the older option.
    def targetVersion = 8
    if (JavaVersion.current().isJava9Compatible()) {
        it.options.release = targetVersion
    } else {
        it.sourceCompatibility = JavaVersion.toVersion(targetVersion)
        it.targetCompatibility = JavaVersion.toVersion(targetVersion)
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "mc_version", project.mc_version

    def props = [
            "version" : project.version,
            "mc_version" : project.mc_version
    ]

    filesMatching ('**/*.json') {
        expand props
    }
}